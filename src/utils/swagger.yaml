openapi: 3.0.0
info:
  title: Alias Game API
  description: API documentation for the Alias Game project
  version: 1.0.0
servers:
  - url: http://localhost:3001/api
paths:
  /users/createUser:
    post:
      summary: Create User
      description: Create a User
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              description:  Mandatory field for register a User
              example:
                username: Some User
                password: some password
      responses:
        '201':
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    type: object
                  username:
                    type: string
                  gamesPlayed:
                    type: number
                  gamesWon:
                    type: number
                  _id:
                    type: string
                  __v: 
                    type: number
                example:
                  message: User registered
                  user: 
                    username: Some User
                    gamesPlayed: 0
                    gamesWon: 0
                    _id: 6705917a8d51ae7a83f93534,
                    __v: 0
        '400':
          description: User already exists
        '500':
          description: Internal server error

  /auth/login: 
    post:
      summary: User login
      description: Login a User
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              description:  Mandatory field for login a User
              example:
                username: Same userName
                password: Same password
      responses:
        '200':
          description: Successfully logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Logged in
                  token:
                    type: string
                    description: JWT token
                example:
                  message: Logged in 
                  token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3MDU5MTdhOGQ1MWFlN2E4M
                  id: 6705917a8d51ae7a83f93534,
        '400':
          description: Invalid credentials
        '500':
          description: Internal server error

  /games/{gameId}:
    get:
      tags:
        - Game
      summary: Get game by ID
      description: "Returns the information of the game with the provided game ID."
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: gameId
          required: true
          schema:
            type: string
          description: "ID of the game to retrieve"
      responses:
        '200':
          description: "Game successfully retrieved"
          content:
            application/json:
              schema:
                type: object
                properties:
                  describerIndices:
                    type: object
                    properties:
                      team1:
                        type: integer
                      team2:
                        type: integer
                  _id:
                    type: string
                  teams:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                        teamName:
                          type: string
                        players:
                          type: array
                          items:
                            type: object
                            properties:
                              _id:
                                type: string
                              username:
                                type: string
                        score:
                          type: integer
                        createdAt:
                          type: string
                          format: date-time
                        updatedAt:
                          type: string
                          format: date-time
                        __v:
                          type: integer
                  rounds:
                    type: integer
                  currentRound:
                    type: integer
                  status:
                    type: string
                  currentTurnTeam:
                    type: string
                  currentDescriber:
                    type: string
                  currentWord:
                    type: string
                  correctGuesses:
                    type: integer
                  createdAt:
                    type: string
                    format: date-time
                  updatedAt:
                    type: string
                    format: date-time
                  __v:
                    type: integer
              example:
                describerIndices:
                  team1: 0
                  team2: 0
                _id: "670ae1e48a25eea8a5b7335c"
                teams:
                  - _id: "670ae1e38a25eea8a5b73358"
                    teamName: "Team 1"
                    players:
                      - _id: "670ae0318a25eea8a5b73354"
                        username: "player"
                    score: 0
                    createdAt: "2024-10-12T20:53:55.535Z"
                    updatedAt: "2024-10-12T20:53:55.535Z"
                    __v: 0
                  - _id: "670ae1e38a25eea8a5b7335a"
                    teamName: "Team 2"
                    players: []
                    score: 0
                    createdAt: "2024-10-12T20:53:55.562Z"
                    updatedAt: "2024-10-12T20:53:55.562Z"
                    __v: 0
                rounds: 3
                currentRound: 0
                status: "waiting"
                currentTurnTeam: "670ae1e38a25eea8a5b73358"
                currentDescriber: "670ae0318a25eea8a5b73354"
                currentWord: "ability"
                correctGuesses: 0
                createdAt: "2024-10-12T20:53:56.037Z"
                updatedAt: "2024-10-12T20:53:56.037Z"
                __v: 0
        '401':
          description: "Unauthorized - missing or invalid JWT"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "Authorization header missing."
        '403':
          description: "Forbidden - administrator role required"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "Access denied, administrator role required"
        '404':
          description: "Not found - game not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "Game not found"
        '500':
          description: "Server error - failed to fetch game"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "Error fetching game"
      summary: Get game by ID
      tags:
        - Game
      parameters:
        - in: path
          name: gameId 
          required: true
          schema:
            type: integer
            minimum: 1
          description: The game ID to get
      responses:
        '200':
          description: Game found
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                    teams:
                      type: array
                      items:
                        type: object
                        properties:
                          _id:
                            type: string
                          teamName:
                            type: string
                          players:
                            type: array
                            items:
                              type: string
                          score:
                            type: integer
                          createdAt:
                            type: string
                            format: date-time
                          updatedAt:
                            type: string
                            format: date-time
                          __v:
                            type: integer
                    rounds:
                      type: integer
                    currentRound:
                      type: integer
                    status:
                      type: string
                    currentTurnTeam:
                      type: string
                    currentDescriber:
                      type: string
                    currentWord:
                      type: string
                    similarWords:
                      type: array
                      items:
                        type: string
                    correctGuesses:
                      type: integer
                    createdAt:
                      type: string
                      format: date-time
                    updatedAt:
                      type: string
                      format: date-time
                    __v:
                      type: integer
        '404':
          description: Game not found
        '500':
          description: Internal server error - Error fetching game   
      
    delete:
      tags:
        - Game
      summary: Delete game by ID
      description: "Deletes the game specified by the game ID in the parameters."
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: gameId
          required: true
          schema:
            type: string
          description: "ID of the game to delete"
      responses:
        '200':
          description: "Game successfully deleted"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "Game Deleted with success!"
        '401':
          description: "Unauthorized - missing or invalid JWT"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "Authorization header missing."
        '403':
          description: "Forbidden - administrator role required"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "Access denied, administrator role required"
        '404':
          description: "Not found - game not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "Game not found"
        '500':
          description: "Internal server error - failed to delete game"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              example:
                error: "Failed to delete game"

  /games/create:
    post:
      tags:
        - Game
      summary: Create a new game
      description: Creates a new game. A first player is needed to create it, this player who joins will be set as the current Describer.
      operationId: createGame
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - firstPlayerId
              properties:
                firstPlayerId:
                  type: string
                  description: ID of the first player who will be the current describer
              example:
                firstPlayerId: "670ae0318a25eea8a5b73354"
      responses:
        '201':
          description: Game created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "New game created"
                  gameId:
                    type: string
                    example: "670ae4798a25eea8a5b73367"
                  game:
                    type: object
                    properties:
                      teams:
                        type: array
                        items:
                          type: string
                          example: "670ae4798a25eea8a5b73363"
                          type: string
                          example: "670ae4798a25eea8a5b73365"
                      rounds:
                        type: integer
                        example: 3
                      currentRound:
                        type: integer
                        example: 0
                      status:
                        type: string
                        example: "waiting"
                      currentTurnTeam:
                        type: string
                        example: "670ae4798a25eea8a5b73363"
                      currentDescriber:
                        type: string
                        example: "670ae0318a25eea8a5b73354"
                      describerIndices:
                        type: object
                        properties:
                          team1:
                            type: integer
                            example: 0
                          team2:
                            type: integer
                            example: 0
                      currentWord:
                        type: string
                        example: "clock"
                      correctGuesses:
                        type: integer
                        example: 0
                      _id:
                        type: string
                        example: "670ae4798a25eea8a5b73367"
                      createdAt:
                        type: string
                        format: date-time
                        example: "2024-10-12T21:04:57.728Z"
                      updatedAt:
                        type: string
                        format: date-time
                        example: "2024-10-12T21:04:57.728Z"
                      __v:
                        type: integer
                        example: 0
        '400':
          description: "Bad request - firstPlayerId is required"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "firstPlayerId is required to create a game"
        '403':
          description: "Forbidden - administrator role required"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "Access denied, administrator role required"
        '500':
          description: "Server error - failed to create game"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "Failed to create game"
      security:
        - bearerAuth: []

  /teams/:
    post:
      summary: Create Team
      description: Create a Team
      tags:
        - Team
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                teamName:
                  type: string
              description:  Mandatory field for create a Team
              example:
                teamName: Team Name
      responses:
        '201':
          content:
            application/json:
              schema:
                type: object
                properties:
                  teamName:
                    type: string
                  players:
                    type: [string]
                  score:
                    type: number
                  _id:
                    type: string
                  createdAt:
                    type: string
                  updatedAt: 
                    type: string
                  __v:
                    type: number
                example:
                    teamName: Team Name,
                    players: [ 67057edd891f4df747d54904 ]
                    score: 0,
                    _id: 67057d70891f4df747d548fd
                    createdAt: 2024-10-08T18:50:05.575Z,
                    updatedAt: 2024-10-08T18:50:05.575Z,
                    __v: 0
        '401':
          description: Authorization header missing (OR) TeamName field must have a value ! (OR) The teamName field must be a string ! (OR) User already have a team !
        '403':
          description: Invalid token

  /teams/searchTeam:
    get:
      summary: Get a specific team
      description:  Search a specific team
      tags: 
        - Team
      security: [ { bearerAuth: [] } ]
      parameters: 
        - in: query
          name: team_id
          required: true
          schema: 
          type: string
          format: ObjectId
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  teamName:
                    type: string
                  players:
                    type: [string]
                  score:
                    type: number
                  createdAt:
                    type: string
                  updatedAt: 
                    type: string
                  __v:
                    type: number
                example:
                    _id: 67057d70891f4df747d548fd
                    teamName: Team Name,
                    players: [ 67057edd891f4df747d54904 ]
                    score: 0
                    createdAt: 2024-10-08T18:50:05.575Z
                    updatedAt: 2024-10-08T18:50:05.575Z
                    __v: 0
        '401':
          description: Authorization header missing
        '403':
          description: Invalid token 
        '404':
          description: Team Not Found !

  /teams/getAllTeams:
    get:
      summary: Get all teams
      description:  Get all teams
      tags: 
        - Team
      security: [ { bearerAuth: [] } ]
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  teamName:
                    type: string
                  players:
                    type: [string]
                  score:
                    type: number
                  createdAt:
                    type: string
                  updatedAt: 
                    type: string
                  __v:
                    type: number
                example: 
                    _id: 670569e031b1d7699ba0ff24
                    teamName: Team Name
                    players: [ 67057edd891f4df747d54904 ]
                    score: 0
                    createdAt: 2024-10-08T18:50:05.575Z
                    updatedAt: 2024-10-08T18:50:05.575Z
                    __v: 0
        '401':
          description: Authorization header missing
        '403':
          description: Invalid token 

  /teams/updateSpecificTeamField:
    patch:
      summary: Update team field
      description: Update specific team field
      tags: 
        - Team
      security: [ { bearerAuth: [] } ]
      parameters: 
        - in: query
          name: team_id
          required: true
          schema: 
          type: string
          format: ObjectId
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                teamName:
                  type: string
              description:  Mandatory field for create a Team
              example:
                teamName: Team Name
      responses:
        '201':
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  teamName:
                    type: string
                  players:
                    type: [string]
                  score:
                    type: number
                  createdAt:
                    type: string
                  updatedAt: 
                    type: string
                  __v:
                    type: number
                example:
                    _id: 67057d70891f4df747d548fd
                    teamName: Team Name,
                    players: [ 67057edd891f4df747d54904 ]
                    score: 0
                    createdAt: 2024-10-08T18:50:05.575Z
                    updatedAt: 2024-10-08T18:50:05.575Z
                    __v: 0
        '401':
          description: Authorization header missing (OR) TeamName field must have a value ! (OR) The teamName field must be a string !
        '403':
          description: Invalid token
        '404':
          description: Team Not Found !

  /teams/deleteTeam:
    delete:
      summary: Delete team
      description: Delete team
      tags: 
        - Team
      security: [ { bearerAuth: [] } ]
      parameters: 
        - in: query
          name: team_id
          required: true
          schema: 
          type: string
          format: ObjectId
      responses:
        '200':
          description: Team Deleted with sucess !
        '403':
          description: Invalid token
        '404':
          description: Team Not Found ! 
      

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerAuth: JWT

