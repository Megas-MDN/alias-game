openapi: 3.0.0
info:
  title: Alias Game API
  description: API documentation for the Alias Game project
  version: 1.0.0
servers:
  - url: http://localhost:3001/api
paths:
  /users/createUser:
    post:
      summary: Create User
      description: Create a User
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              description:  Mandatory field for register a User
              example:
                username: Some User
                password: some password
      responses:
        '201':
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    type: object
                  username:
                    type: string
                  gamesPlayed:
                    type: number
                  gamesWon:
                    type: number
                  _id:
                    type: string
                  __v: 
                    type: number
                example:
                  message: User registered
                  user: 
                    username: Some User
                    gamesPlayed: 0
                    gamesWon: 0
                    _id: 6705917a8d51ae7a83f93534,
                    __v: 0
        '401':
          description: The fields must have a value ! (OR) The fileds must be a string ! (OR) User already exists

  /users/getSpecificUser:
    get:
      summary: Get a specific User
      description:  Search a specific User
      tags: 
        - User
      security: [ { bearerAuth: [] } ]
      parameters: 
        - in: query
          name: user_id
          required: true
          schema: 
          type: string
          format: ObjectId
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  username:
                    type: string
                  gamesPlayed:
                    type: number
                  gamesWon:
                    type: number
                  role:
                    type: string
                example:
                    _id: 67057d70891f4df747d548fd
                    username: Some User,
                    gamesPlayed: 0
                    gamesWon: 0
                    role: player
        '401':
          description: Authorization header missing
        '403':
          description: Invalid token (OR) Access denied, administrator role required
        '404':
          description: User not found !

  /users/getAllUsers:
    get:  
      ummary: Get All Users
      description:  Get All Users
      tags: 
        - User
      security: [ { bearerAuth: [] } ]
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  username:
                    type: string
                  password:
                    type: string
                  gamesPlayed:
                    type: number
                  gamesWon:
                    type: number
                  role:
                    type: string
                  __v:
                    type: number
                example:
                    _id: 67057d70891f4df747d548fd
                    username: Some User,
                    password: $2a$10$1DJIMBvo0L2gxsRfK9kxTOUPfjDFkf
                    gamesPlayed: 0
                    gamesWon: 0
                    role: admin
                    "__v": 0
        '401':
          description: Authorization header missing
        '403':
          description: Invalid token (OR) Access denied, administrator role required

  /users/updateUserField:
    patch:
      summary: Update User field
      description: Update specific User field
      tags: 
        - User
      security: [ { bearerAuth: [] } ]
      parameters: 
        - in: query
          name: user_id
          required: true
          schema: 
          type: string
          format: ObjectId
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                gamesPlayed:
                  type: number
              description:  Mandatory field for create a Team
              example:
                gamesPlayed: 0
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  username:
                    type: string
                  gamesPlayed:
                    type: number
                  gamesWon:
                    type: number
                  role:
                    type: string
                example:
                    _id: 67057d70891f4df747d548fd
                    username: Some User,
                    gamesPlayed: 2
                    gamesWon: 0
                    role: admin
        '401':
          description: Authorization header missing (OR) The gamesPlayed field must have a value ! (OR) The gamesPlayed field must be a number !
        '403':
          description: Invalid token (OR) Access denied, administrator role required    
        '404':
          description: User not found !   

  /users/deleteUser:
    delete:
      summary: Delete User
      description: Delete User
      tags: 
        - User
      security: [ { bearerAuth: [] } ]
      parameters: 
        - in: query
          name: user_id
          required: true
          schema: 
          type: string
          format: ObjectId
      responses:
        '200':
          description: User deleted with sucess !
        '401':
          description: Authorization header missing
        '403':
          description: Invalid token (OR) Access denied, administrator role required
        '404':
          description: User not found !

  /auth/login: 
    post:
      summary: User login
      description: Login a User
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              description:  Mandatory field for login a User
              example:
                username: Same username
                password: Same password
      responses:
        '200':
          description: Successfully logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Logged in
                  token:
                    type: string
                    description: JWT token
                example:
                  message: Logged in 
                  token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3MDU5MTdhOGQ1MWFlN2E4M
                  id: 6705917a8d51ae7a83f93534,
        '400':
          description: Invalid credentials
        "401":
          description: The fields must have a value ! (OR) The fileds must be a string !

  /auth/createAdmin:
    post:
      summary: Create User Admin
      description: Create a User Admin
      tags:
        - Auth
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              description:  Mandatory field for Create a User Admin
              example:
                username: Same username
                password: Same password
      responses:
        '201':
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  _id:
                    type: string
                  username:
                    type: string
                  gamesPlayed:
                    type: number
                  gamesWon:
                    type: number
                  role:
                    type: string
                  adminToken:
                    type: string
                example:
                    message: Admin created successfully
                    _id: 670aa89113ff2eb70673148c
                    username: Some User
                    gamesPlayed: 0
                    gamesWon: 0
                    role: admin,
                    adminToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3MGFhODkxMTNmZjJlYjcwNjczMTQ4YyIsInVzZXJuYW1lIj
        '401':
          description: Authorization header missing (OR) The fields must have a value ! (OR) The fileds must be a string ! (OR) User already exists
        '403':
          description: Invalid token

  /games/{gameId}:
    get:
      summary: Get game by ID
      tags:
        - Game
      parameters:
        - in: path
          name: gameId 
          required: true
          schema:
            type: integer
            minimum: 1
          description: The game ID to get
      responses:
        '200':
          description: Game found
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                    teams:
                      type: array
                      items:
                        type: object
                        properties:
                          _id:
                            type: string
                          teamName:
                            type: string
                          players:
                            type: array
                            items:
                              type: string
                          score:
                            type: integer
                          createdAt:
                            type: string
                            format: date-time
                          updatedAt:
                            type: string
                            format: date-time
                          __v:
                            type: integer
                    rounds:
                      type: integer
                    currentRound:
                      type: integer
                    status:
                      type: string
                    currentTurnTeam:
                      type: string
                    currentDescriber:
                      type: string
                    currentWord:
                      type: string
                    similarWords:
                      type: array
                      items:
                        type: string
                    correctGuesses:
                      type: integer
                    createdAt:
                      type: string
                      format: date-time
                    updatedAt:
                      type: string
                      format: date-time
                    __v:
                      type: integer
        '404':
          description: Game not found
        '500':
          description: Internal server error - Error fetching game   
      
    delete:
      summary: Delete game by ID
      tags:
        - Game
      parameters:
        - in: path
          name: gameId 
          required: true
          schema:
            type: integer
            minimum: 1
          description: The game ID to delete
  /games/join:   
  /games/play:

  /teams/:
    post:
      summary: Create Team
      description: Create a Team
      tags:
        - Team
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                teamName:
                  type: string
              description:  Mandatory field for create a Team
              example:
                teamName: Team Name
      responses:
        '201':
          content:
            application/json:
              schema:
                type: object
                properties:
                  teamName:
                    type: string
                  players:
                    type: [string]
                  score:
                    type: number
                  _id:
                    type: string
                  createdAt:
                    type: string
                  updatedAt: 
                    type: string
                  __v:
                    type: number
                example:
                    teamName: Team Name,
                    players: [ 67057edd891f4df747d54904 ]
                    score: 0,
                    _id: 67057d70891f4df747d548fd
                    createdAt: 2024-10-08T18:50:05.575Z,
                    updatedAt: 2024-10-08T18:50:05.575Z,
                    __v: 0
        '401':
          description: Authorization header missing (OR) TeamName field must have a value ! (OR) The teamName field must be a string ! (OR) User already have a team !
        '403':
          description: Invalid token

  /teams/searchTeam:
    get:
      summary: Get a specific team
      description:  Search a specific team
      tags: 
        - Team
      security: [ { bearerAuth: [] } ]
      parameters: 
        - in: query
          name: team_id
          required: true
          schema: 
          type: string
          format: ObjectId
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  teamName:
                    type: string
                  players:
                    type: [string]
                  score:
                    type: number
                  createdAt:
                    type: string
                  updatedAt: 
                    type: string
                  __v:
                    type: number
                example:
                    _id: 67057d70891f4df747d548fd
                    teamName: Team Name,
                    players: [ 67057edd891f4df747d54904 ]
                    score: 0
                    createdAt: 2024-10-08T18:50:05.575Z
                    updatedAt: 2024-10-08T18:50:05.575Z
                    __v: 0
        '401':
          description: Authorization header missing
        '403':
          description: Invalid token 
        '404':
          description: Team Not Found !

  /teams/getAllTeams:
    get:
      summary: Get all teams
      description:  Get all teams
      tags: 
        - Team
      security: [ { bearerAuth: [] } ]
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  teamName:
                    type: string
                  players:
                    type: [string]
                  score:
                    type: number
                  createdAt:
                    type: string
                  updatedAt: 
                    type: string
                  __v:
                    type: number
                example: 
                    _id: 670569e031b1d7699ba0ff24
                    teamName: Team Name
                    players: [ 67057edd891f4df747d54904 ]
                    score: 0
                    createdAt: 2024-10-08T18:50:05.575Z
                    updatedAt: 2024-10-08T18:50:05.575Z
                    __v: 0
        '401':
          description: Authorization header missing
        '403':
          description: Invalid token 

  /teams/updateSpecificTeamField:
    patch:
      summary: Update team field
      description: Update specific team field
      tags: 
        - Team
      security: [ { bearerAuth: [] } ]
      parameters: 
        - in: query
          name: team_id
          required: true
          schema: 
          type: string
          format: ObjectId
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                teamName:
                  type: string
              description:  Mandatory field for create a Team
              example:
                teamName: Team Name
      responses:
        '201':
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  teamName:
                    type: string
                  players:
                    type: [string]
                  score:
                    type: number
                  createdAt:
                    type: string
                  updatedAt: 
                    type: string
                  __v:
                    type: number
                example:
                    _id: 67057d70891f4df747d548fd
                    teamName: Team Name,
                    players: [ 67057edd891f4df747d54904 ]
                    score: 0
                    createdAt: 2024-10-08T18:50:05.575Z
                    updatedAt: 2024-10-08T18:50:05.575Z
                    __v: 0
        '401':
          description: Authorization header missing (OR) TeamName field must have a value ! (OR) The teamName field must be a string !
        '403':
          description: Invalid token
        '404':
          description: Team Not Found !

  /teams/deleteTeam:
    delete:
      summary: Delete team
      description: Delete team
      tags: 
        - Team
      security: [ { bearerAuth: [] } ]
      parameters: 
        - in: query
          name: team_id
          required: true
          schema: 
          type: string
          format: ObjectId
      responses:
        '200':
          description: Team Deleted with sucess !
        '401':
          description: Authorization header missing
        '403':
          description: Invalid token
        '404':
          description: Team Not Found ! 
      

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerAuth: JWT

